name: Analytics Dashboard

on:
  schedule:
    - cron: '0 3 * * *'   # Diariamente 03:00 UTC
  workflow_dispatch:
  push:
    branches: [ master, develop ]
#  pull_request:
#    branches: [ master, develop ]

permissions:
  contents: write
  security-events: read
  actions: read

env:
  TARGET_BRANCH: badges
  DASHBOARD_DIR: docs/analytics-dashboard
  PUBLISH_GHPAGES: true

jobs:
  generate-dashboard:
    name: Consolidar Métricas & Gerar Dashboard
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código (branch atual)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch branch de métricas (badges)
        run: |
          set -e
          git fetch origin $TARGET_BRANCH || true
          if git show-ref --verify --quiet refs/remotes/origin/$TARGET_BRANCH; then
            echo "Branch $TARGET_BRANCH existente – criando worktree."
            git worktree add _badges_worktree origin/$TARGET_BRANCH
          else
            echo "Branch $TARGET_BRANCH inexistente – criando nova (orphan)."
            git worktree add -b $TARGET_BRANCH _badges_worktree || true
            (
              cd _badges_worktree
              if [ ! -d .git ]; then echo "Worktree não inicializado corretamente"; fi
              mkdir -p badges/history docs/analytics-dashboard
              git add . || true
              git commit --allow-empty -m "chore(badges): inicializar branch de métricas" || true
              git push origin HEAD:$TARGET_BRANCH || true
            )
          fi
      - name: Instalar dependências mínimas (se necessário)
        run: |
          echo "Usando Node para chamadas API nativas (fetch)."
      - name: Gerar arquivos analíticos
        id: gen
        env:
          REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node ./scripts/generate-analytics-dashboard.js
      - name: Publicar dashboard na branch de métricas (badges)
        run: |
          set -e
          if [ ! -d _badges_worktree ]; then echo "Worktree de badges não encontrada"; exit 0; fi
          # Copiar artefatos gerados para a worktree
          mkdir -p _badges_worktree/docs/analytics-dashboard
          cp -R $DASHBOARD_DIR/* _badges_worktree/docs/analytics-dashboard/ 2>/dev/null || true
          if [ -f analytics/metrics.json ]; then
            mkdir -p _badges_worktree/analytics
            cp analytics/metrics.json _badges_worktree/analytics/metrics.json
          fi
          (
            cd _badges_worktree
            if git status --porcelain | grep -q .; then
              git config user.name 'github-actions'
              git config user.email 'actions@github.com'
              git add docs/analytics-dashboard analytics/metrics.json || true
              git commit -m 'chore(analytics): atualizar dashboard analítico'
              # Push com uma tentativa de rebase para evitar rejeição por corrida
              git push origin HEAD:$TARGET_BRANCH || (
                echo "Primeiro push falhou – tentando pull --rebase e retry";
                git pull --rebase origin $TARGET_BRANCH || true;
                git push origin HEAD:$TARGET_BRANCH || echo "Falha ao enviar dashboard (segunda tentativa)";
              )
            else
              echo "Nenhuma alteração para dashboard (branch $TARGET_BRANCH)."
            fi
          )
          # Cleanup opcional: remover worktree para não poluir workspace de runner
          git worktree prune || true
          rm -rf _badges_worktree || true
      - name: Publicar em gh-pages (GitHub Pages)
        if: env.PUBLISH_GHPAGES == 'true'
        run: |
          set -e
          echo "== Publicação GitHub Pages =="
          GH_BRANCH=gh-pages
          # Preparar worktree
          if git ls-remote --exit-code origin $GH_BRANCH >/dev/null 2>&1; then
            git fetch origin $GH_BRANCH:$GH_BRANCH || true
            git worktree add _ghpages_worktree $GH_BRANCH
          else
            git worktree add -b $GH_BRANCH _ghpages_worktree
          fi
          mkdir -p _ghpages_worktree/analytics-dashboard
          cp -R $DASHBOARD_DIR/* _ghpages_worktree/analytics-dashboard/ 2>/dev/null || true
          # Index principal apontando para a pasta gerada
          if [ ! -f _ghpages_worktree/index.html ]; then
            printf '%s\n' '<!DOCTYPE html>' \
              '<html lang="pt-br">' \
              '  <head>' \
              '    <meta charset="UTF-8" />' \
              '    <title>Analytics Dashboards</title>' \
              '    <meta name="viewport" content="width=device-width,initial-scale=1" />' \
              '    <style>' \
              '      body{font-family:system-ui,Arial,sans-serif;margin:40px;}' \
              '      a{color:#2563eb;text-decoration:none;}' \
              '      a:hover{text-decoration:underline;}' \
              '      ul{line-height:1.6}' \
              '      footer{margin-top:40px;font-size:12px;color:#666}' \
              '      code{background:#f5f5f5;padding:2px 4px;border-radius:4px}' \
              '    </style>' \
              '  </head>' \
              '  <body>' \
              '    <h1>Dashboards Analíticos</h1>' \
              '    <p><a href="analytics-dashboard/" rel="noopener">Abrir dashboard atual</a></p>' \
              '    <ul><li>Diretório: <code>analytics-dashboard/</code></li></ul>' \
              '    <footer>Gerado automaticamente via workflow analytics-dashboard.yml</footer>' \
              '  </body>' \
              '</html>' > _ghpages_worktree/index.html
          fi
          (
            cd _ghpages_worktree
            if git status --porcelain | grep -q .; then
              git config user.name 'github-actions'
              git config user.email 'actions@github.com'
              git add .
              git commit -m "chore(pages): atualizar dashboard em gh-pages"
              git push origin $GH_BRANCH || (
                echo "Push inicial falhou, tentando pull --rebase";
                git pull --rebase origin $GH_BRANCH || true
                git push origin $GH_BRANCH || echo "Falha push gh-pages";
              )
            else
              echo "Nenhuma alteração para gh-pages."
            fi
          )
          git worktree prune || true
          rm -rf _ghpages_worktree || true
      # Passo opcional (desabilitado): Publicar em gh-pages
      # - name: Publicar em gh-pages
      #   if: ${{ false }}
      #   run: |
      #     echo "(Placeholder para publicação em gh-pages)"
