name: Orchestrator Pipeline

on:
  push:
    branches: [ master, develop, feature/*, release/* ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

permissions:
  contents: write
  security-events: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20.x'
  SONAR_PROJECT_KEY: github_poc-task-manager-herooffer-ghc
  SONAR_ORG: luanagithub

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            frontend/package-lock.json
      - name: Install root + workspaces deps (peer-safe)
        run: |
          set -e
          echo "Installing root devDependencies (eslint & plugins) + workspaces with legacy peer fallback.";
          if [ -f package-lock.json ]; then
            npm ci || echo "npm ci failed -> fallback";
          fi
          if [ ! -d node_modules ]; then
            npm install --legacy-peer-deps
          fi
          # Ensure workspace deps too (will respect lockfile entries)
            npm install --workspaces --legacy-peer-deps
          echo "Installed packages:"; ls -1 node_modules | head -n 30 || true
          echo "Node $(node -v) - npm $(npm -v)"
      - name: Lint (flat config)
        run: |
          npx eslint backend frontend

  typecheck:
    name: Type Check (Frontend)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: |
          (npm ci || npm install --legacy-peer-deps)
      - name: TypeScript Check
        working-directory: frontend
        run: npx tsc --noEmit

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: [typecheck]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: |
          (npm ci || npm install --legacy-peer-deps)
      - name: Run Backend Tests
        working-directory: backend
        run: |
          npx jest --config jest.config.unit.js --coverage --coverageDirectory coverage-unit --reporters=default \
            --coverageReporters=text --coverageReporters=lcov --coverageReporters=json-summary
          if [ -f jest.config.integration.js ]; then npx jest --config jest.config.integration.js; fi
      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage-unit/

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [typecheck]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: |
          (npm ci || npm install --legacy-peer-deps)
      - name: Run Frontend Tests
        working-directory: frontend
        env:
          CI: true
        run: |
          npm test -- --coverage --watchAll=false \
            --coverageReporters=text --coverageReporters=lcov --coverageReporters=json-summary
      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

  coverage-gate:
    name: Coverage Gate (>=80%)
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    outputs:
      coverage_avg: ${{ steps.combine.outputs.avg }}
      coverage_gate: ${{ steps.combine.outputs.gate }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
      - name: Combine & Enforce Coverage
        id: combine
        run: |
          set -e
          BACK=$(find coverage-artifacts/backend-coverage -maxdepth 2 -name 'coverage-summary.json' | head -n1 || true)
          FRONT=$(find coverage-artifacts/frontend-coverage -maxdepth 2 -name 'coverage-summary.json' | head -n1 || true)
          if [ -z "$BACK" ] || [ -z "$FRONT" ]; then echo "::error::Missing coverage summaries"; exit 1; fi
          export BACK FRONT
          node <<'EOF'
          const fs = require('fs');
          const backend = process.env.BACK;
          const frontend = process.env.FRONT;
          const b = JSON.parse(fs.readFileSync(backend,'utf8'));
          const f = JSON.parse(fs.readFileSync(frontend,'utf8'));
          function merge(a,b){return { total:a.total+b.total, covered:a.covered+b.covered };}
          const metrics = Object.keys(b.total);
          const result={ total:{} };
          for(const m of metrics){ const merged=merge(b.total[m], f.total[m]); merged.pct=(merged.covered/merged.total*100).toFixed(2); result.total[m]=merged; }
          const thresholds={ lines:80, statements:80, functions:80, branches:80 };
          const fails=Object.entries(thresholds).filter(([k,v])=> parseFloat(result.total[k].pct)<v).map(([k])=>k+':'+result.total[k].pct);
          const avg=(Object.values(result.total).reduce((a,m)=>a+parseFloat(m.pct),0)/metrics.length).toFixed(2);
          fs.mkdirSync('combined-coverage',{recursive:true});
          const avgColor = parseFloat(avg)>=90?'brightgreen':parseFloat(avg)>=80?'green':parseFloat(avg)>=60?'orange':'red';
          fs.writeFileSync('combined-coverage/coverage-badge.json', JSON.stringify({schemaVersion:1,label:'coverage (combined)',message:avg+'%',color: avgColor}));
          const gatePass = fails.length === 0;
          fs.writeFileSync('combined-coverage/coverage-gate-badge.json', JSON.stringify({schemaVersion:1,label:'coverage gate',message: gatePass? 'pass':'fail',color: gatePass? 'green':'red'}));
          fs.writeFileSync('combined-coverage/coverage-metrics.json', JSON.stringify({ avg, metrics: result.total, pass: gatePass, fails }, null, 2));
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `avg=${avg}\n`);
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `gate=${gatePass? 'pass':'fail'}\n`);
          if(fails.length){ console.error('Coverage gate fail:', fails.join(',')); process.exit(1); }
          EOF
      - name: Upload Combined Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: combined-coverage

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [coverage-gate]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: |
          (npm ci || npm install --legacy-peer-deps)
      - name: Backend smoke
        working-directory: backend
        run: |
          node -c src/server.js 2>/dev/null || echo "(no syntax issues)"
          timeout 5s node src/server.js &
          sleep 2
          echo "Backend started (smoke)"

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: |
          (npm ci || npm install --legacy-peer-deps)
      - name: Build
        working-directory: frontend
        run: |
          if npm run | grep -q build; then npm run build; else echo "(no build script)"; fi

  codeql:
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    needs: [build-frontend]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          build-mode: none
        env:
          CODEQL_ACTION_DEBUG: true
      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'
        env:
          CODEQL_ACTION_DEBUG: true
      - name: CodeQL SARIF existence debug
        run: |
          ls -R ./codeql* || true
          echo "Listing uploaded SARIF (post-action cannot access, but we verify working directory)."


  diff-coverage:
    name: Diff Coverage (changed files)
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    outputs:
      diff_pct: ${{ steps.diffcalc.outputs.pct }}
      diff_pass: ${{ steps.diffcalc.outputs.pass }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: List Changed Files
        id: changed
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.ref }}"
            git fetch origin "$BASE_REF:$BASE_REF" || true
            git diff --name-only origin/$BASE_REF...HEAD | grep -E '^(backend|frontend)/src/' || true > changed.txt
          else
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              git diff --name-only HEAD~1..HEAD | grep -E '^(backend|frontend)/src/' || true > changed.txt
            else
              echo "(No previous commit to diff against)";
              touch changed.txt
            fi
          fi
          echo "Changed files:"; cat changed.txt || true
          printf 'list<<EOF\n' >> $GITHUB_OUTPUT
          cat changed.txt >> $GITHUB_OUTPUT
          printf '\nEOF\n' >> $GITHUB_OUTPUT
      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          path: diff-cov-artifacts
      - name: Compute Diff Coverage
        id: diffcalc
        run: |
          set -e
          CHANGED="$(cat changed.txt)"
          if [ -z "${CHANGED// /}" ]; then
            echo "No changed source files; marking pass with 100%.";
            mkdir -p diff-coverage
            echo '{"schemaVersion":1,"label":"diff coverage","message":"100%","color":"brightgreen"}' > diff-coverage/diff-coverage-badge.json
            echo "pct=100" >> $GITHUB_OUTPUT; echo "pass=true" >> $GITHUB_OUTPUT; exit 0;
          fi
          echo "Changed files:\n$CHANGED"
          node <<'EOF'
          const fs = require('fs');
          const changedRaw = process.env.CHANGED_LIST.split('\n').filter(Boolean);
          const threshold = parseFloat(process.env.DIFF_THRESHOLD || '80');
          function walk(dir, out=[]) { for (const e of fs.readdirSync(dir,{withFileTypes:true})){ const p=dir+'/'+e.name; if(e.isDirectory()) walk(p,out); else if(e.isFile()&&e.name==='lcov.info') out.push(p);} return out; }
          const lcovFiles = walk('diff-cov-artifacts');
          if(!lcovFiles.length){ fs.appendFileSync(process.env.GITHUB_OUTPUT,'pct=0\npass=false\n'); process.exit(1); }
          let total=0, covered=0;
          for(const file of lcovFiles){
            const data = fs.readFileSync(file,'utf8').split('\n');
            let current=null, lines=[];
            for(const line of data){
              if(line.startsWith('SF:')){ current=line.substring(3).trim(); lines=[]; }
              else if(line.startsWith('DA:')){ const [ln,hits]=line.substring(3).split(','); lines.push({ln:parseInt(ln,10),hits:parseInt(hits,10)}); }
              else if(line==='end_of_record' && current){
                const short=current.replace(/.*(backend|frontend)\//,'$1/');
                if(changedRaw.some(ch=> short.endsWith(ch) || short.includes(ch))){ for(const l of lines){ total++; if(l.hits>0) covered++; } }
                current=null; lines=[];
              }
            }
          }
          const pct = total? (covered/total*100).toFixed(2) : '100';
          const pass = parseFloat(pct) >= threshold;
          fs.mkdirSync('diff-coverage',{recursive:true});
          const color = parseFloat(pct)>=90?'brightgreen':parseFloat(pct)>=threshold?'green':parseFloat(pct)>=60?'orange':'red';
          fs.writeFileSync('diff-coverage/diff-coverage-badge.json', JSON.stringify({schemaVersion:1,label:'diff coverage',message:pct+'%',color}));
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `pct=${pct}\npass=${pass}\n`);
          if(!pass){
            console.error(`Diff coverage below threshold (${threshold}%) -> ${pct}%`);
            process.exit(1);
          }
          EOF
        env:
          CHANGED_LIST: ${{ steps.changed.outputs.list }}
          DIFF_THRESHOLD: 80
        shell: bash
      - name: Upload Diff Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: diff-coverage
          path: diff-coverage
  sbom:
    name: SBOM (CycloneDX)
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Generate SBOM backend
        working-directory: backend
        run: |
          (npm ci || npm install --legacy-peer-deps)
          npx @cyclonedx/cyclonedx-npm --json --output ../sbom-backend.json || npx cyclonedx-npm --json --output ../sbom-backend.json || echo "(fallback)"
      - name: Generate SBOM frontend
        working-directory: frontend
        run: |
          (npm ci || npm install --legacy-peer-deps)
          npx @cyclonedx/cyclonedx-npm --json --output ../sbom-frontend.json || npx cyclonedx-npm --json --output ../sbom-frontend.json || echo "(fallback)"
      - name: Package SBOMs
        run: |
          mkdir -p sbom
          mv sbom-backend.json sbom/backend.json 2>/dev/null || true
          mv sbom-frontend.json sbom/frontend.json 2>/dev/null || true
          BACK_OK=false; FRONT_OK=false
          [ -f sbom/backend.json ] && BACK_OK=true
          [ -f sbom/frontend.json ] && FRONT_OK=true
          if $BACK_OK && $FRONT_OK; then
            node -e "const fs=require('fs');const back=JSON.parse(fs.readFileSync('sbom/backend.json','utf8'));const front=JSON.parse(fs.readFileSync('sbom/frontend.json','utf8'));const combined={bomFormat:'CycloneDX',specVersion:back.specVersion||front.specVersion||'1.5',version:1,metadata:{tools:[...(back.metadata?.tools||[]),...(front.metadata?.tools||[])]},components:[...(back.components||[]),...(front.components||[])]};fs.writeFileSync('sbom/combined.json',JSON.stringify(combined,null,2));console.log('Combined SBOM written to sbom/combined.json');"
          elif $BACK_OK && ! $FRONT_OK; then
            echo "Frontend SBOM missing; using backend SBOM as combined.";
            cp sbom/backend.json sbom/combined.json
          elif $FRONT_OK && ! $BACK_OK; then
            echo "Backend SBOM missing; using frontend SBOM as combined.";
            cp sbom/frontend.json sbom/combined.json
          else
            echo "No SBOM files generated; creating placeholder.";
            echo '{"bomFormat":"CycloneDX","specVersion":"1.5","version":1,"metadata":{"tools":[]},"components":[]}' > sbom/combined.json
          fi
          # Add a lightweight index for quick inspection
          echo "SBOM files:" > sbom/index.txt
          ls -1 sbom >> sbom/index.txt || true
          ls -l sbom
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom
  sonar:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Guard (skip if secret missing or external PR)
        id: sonar_guard
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "SKIP=true" >> $GITHUB_OUTPUT
            echo "::warning::External PR (fork) - skipping Sonar.";
            exit 0
          fi
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "SKIP=true" >> $GITHUB_OUTPUT
            echo "::warning::SONAR_TOKEN missing - skipping Sonar.";
          else
            echo "SKIP=false" >> $GITHUB_OUTPUT
          fi
      - name: SonarCloud Scan
        if: steps.sonar_guard.outputs.SKIP == 'false'
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.sources=backend/src,frontend/src
            -Dsonar.exclusions=**/node_modules/**,**/coverage/**
            -Dsonar.javascript.lcov.reportPaths=backend/coverage-unit/lcov.info,frontend/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.*,**/tests/**,**/coverage/**,**/jest.config*.js
      - name: Check Quality Gate
        if: steps.sonar_guard.outputs.SKIP == 'false'
        run: |
          sleep 10
          STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT_KEY }}" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $STATUS"
          if [ "$STATUS" != "OK" ] && [ "$STATUS" != "SUCCESS" ]; then
            echo "::error::Quality Gate failed ($STATUS)"; exit 1; fi
      - name: Sonar Summary
        run: |
          if [ "${{ steps.sonar_guard.outputs.SKIP }}" = "true" ]; then
            echo "### SonarCloud" >> $GITHUB_STEP_SUMMARY
            echo "Skipped (fork or missing secret)." >> $GITHUB_STEP_SUMMARY
          else
            echo "### SonarCloud" >> $GITHUB_STEP_SUMMARY
            echo "Analysis executed." >> $GITHUB_STEP_SUMMARY
          fi
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep (ci ruleset)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
      - name: Semgrep Summary
        run: |
          echo "### Semgrep" >> $GITHUB_STEP_SUMMARY
          echo "Executed (ci rules)." >> $GITHUB_STEP_SUMMARY
  finalize:
    name: Finalize Summary
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test-backend, test-frontend, coverage-gate, build-backend, build-frontend, codeql, sonar, diff-coverage, sbom, semgrep]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "### Pipeline Orchestrator" >> $GITHUB_STEP_SUMMARY
          echo "Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Typecheck: ${{ needs.typecheck.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Backend Tests: ${{ needs['test-backend'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "Frontend Tests: ${{ needs['test-frontend'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "Coverage Gate: ${{ needs['coverage-gate'].result }} (avg=${{ needs['coverage-gate'].outputs.coverage_avg }} gate=${{ needs['coverage-gate'].outputs.coverage_gate }})" >> $GITHUB_STEP_SUMMARY
          echo "Build Backend: ${{ needs['build-backend'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "Build Frontend: ${{ needs['build-frontend'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "CodeQL: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Sonar: ${{ needs.sonar.result }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.diff-coverage.result }}" != "skipped" ]; then echo "Diff Coverage: ${{ needs['diff-coverage'].result }} (pct=${{ needs['diff-coverage'].outputs.diff_pct || 'n/a' }})" >> $GITHUB_STEP_SUMMARY; fi
          echo "SBOM: ${{ needs.sbom.result }}" >> $GITHUB_STEP_SUMMARY
      - name: Checkout (for badges)
        if: github.event_name == 'push'
        uses: actions/checkout@v4
      - name: Download Combined Coverage Artifact
        if: github.event_name == 'push'
        uses: actions/download-artifact@v4
        with:
          name: combined-coverage
          path: combined-coverage
      - name: Download Diff Coverage Artifact
        if: github.event_name == 'push'
        uses: actions/download-artifact@v4
        with:
          name: diff-coverage
          path: diff-coverage
      - name: Publish Badges (push events only)
        if: github.event_name == 'push'
        run: |
          set -e
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          mkdir -p badges/history
          if [ -f diff-coverage/diff-coverage-badge.json ]; then
            DIFF_PCT=$(jq -r '.message' diff-coverage/diff-coverage-badge.json 2>/dev/null | tr -d '%')
            if [ -n "$DIFF_PCT" ]; then
              export DIFF_HISTORY_FILE=badges/history/diff-coverage-history-${SAFE_BRANCH}.json
              node -e "const fs=require('fs');const p=process.env.DIFF_HISTORY_FILE;const val=parseFloat(process.env.DIFF_PCT_VAL);let d=[];try{d=JSON.parse(fs.readFileSync(p,'utf8'));}catch{}d.push({t:Math.floor(Date.now()/1000),pct:val});d=d.slice(-199);fs.writeFileSync(p,JSON.stringify(d,null,2));" DIFF_PCT_VAL="$DIFF_PCT"
            fi
          fi
          if [ -f combined-coverage/coverage-badge.json ]; then
            cp combined-coverage/coverage-badge.json badges/coverage-badge.json
          fi
          if [ -f combined-coverage/coverage-gate-badge.json ]; then
            cp combined-coverage/coverage-gate-badge.json badges/coverage-gate-badge.json
          fi
          if [ -f sonar-qg-badge.json ]; then
            cp sonar-qg-badge.json badges/sonar-quality-gate-badge.json
          fi
          if [ -f diff-coverage/diff-coverage-badge.json ]; then
            cp diff-coverage/diff-coverage-badge.json badges/diff-coverage-badge.json
          fi
          BUILD_STATUS="${{ needs['build-backend'].result }}-${{ needs['build-frontend'].result }}"
          if [ "$BUILD_STATUS" = "success-success" ]; then COLOR=green; MSG=success; else COLOR=red; MSG=fail; fi
            echo "{ \"schemaVersion\":1, \"label\":\"build\", \"message\":\"${MSG}\", \"color\":\"${COLOR}\" }" > badges/build-status-badge.json
          if [ -f combined-coverage/coverage-metrics.json ]; then
            export HISTORY_FILE=badges/history/coverage-history-${SAFE_BRANCH}.json
            LATEST_FILE=badges/history/coverage-latest-${SAFE_BRANCH}.json
            METRICS=$(cat combined-coverage/coverage-metrics.json)
            echo "$METRICS" > "$LATEST_FILE"
            node -e "const fs=require('fs');const p=process.env.HISTORY_FILE;const m=JSON.parse(fs.readFileSync('combined-coverage/coverage-metrics.json','utf8'));let d=[];try{d=JSON.parse(fs.readFileSync(p,'utf8'));}catch{}d.push({t:Math.floor(Date.now()/1000),avg:m.avg,pass:m.pass});d=d.slice(-199);fs.writeFileSync(p, JSON.stringify(d,null,2));"
          fi
          if git status --porcelain | grep -q .; then
            git add badges
            git commit -m "chore(badges): update badges for ${GITHUB_REF_NAME}" || echo "Nothing to commit"
            git push origin badges
          else
            echo "No badge changes to commit"
          fi
      - name: PR Coverage Delta Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          CURRENT_AVG: ${{ needs['coverage-gate'].outputs.coverage_avg }}
          GATE_STATUS: ${{ needs['coverage-gate'].outputs.coverage_gate }}
          REPO_FULL: ${{ github.repository }}
          DIFF_PCT: ${{ needs['diff-coverage'].outputs.diff_pct }}
          DIFF_PASS: ${{ needs['diff-coverage'].outputs.diff_pass }}
        with:
          script: |
            const marker='<!-- coverage-delta -->';
            const current = parseFloat(process.env.CURRENT_AVG);
            const baseRef = context.payload.pull_request.base.ref; // base branch
            const safeBase = baseRef.replace(/[\\/]/g,'-').toLowerCase();
            const url = `https://raw.githubusercontent.com/${process.env.REPO_FULL}/badges/badges/coverage-badge-${safeBase}.json`;
            let baseVal = null;
            try {
              const resp = await fetch(url);
              if(resp.ok){ const json = await resp.json(); baseVal = parseFloat((json.message||'').replace('%','')); }
            } catch(e) { /* ignore */ }
            let delta = baseVal==null? 'n/a' : (current - baseVal).toFixed(2);
            let symbol='';
            if(baseVal!=null){ const d=current-baseVal; symbol = d>0?'▲': d<0?'▼':'='; }
            const diffPct = process.env.DIFF_PCT ? `${process.env.DIFF_PCT}%` : 'n/a';
            const diffPass = process.env.DIFF_PASS ? (process.env.DIFF_PASS === 'true' ? 'pass' : 'fail') : 'n/a';
            const bodyContent = `### Coverage Delta\nCurrent (PR): **${current}%**\nBase (${baseRef}): **${baseVal!=null? baseVal+'%':'unavailable'}**\nDelta: **${symbol} ${delta}%**\nGate (>=80%): **${process.env.GATE_STATUS}**`;
            const extended = bodyContent + `\nDiff Coverage (>=80%): **${diffPct} (${diffPass})**`;
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number: context.issue.number });
            const existing = comments.find(c=> c.body && c.body.includes(marker));
            if(existing){
              await github.rest.issues.updateComment({ ...context.repo, comment_id: existing.id, body: `${marker}\n${extended}` });
            } else {
              await github.rest.issues.createComment({ ...context.repo, issue_number: context.issue.number, body: `${marker}\n${extended}` });
            }
