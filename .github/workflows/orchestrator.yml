name: Orchestrator Pipeline

on:
  push:
    branches: [ master, develop, feature/*, release/* ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

permissions:
  contents: write
  security-events: write
  pull-requests: write

env:
  NODE_VERSION: 20.x
  SONAR_PROJECT_KEY: github_poc-task-manager-herooffer-ghc
  SONAR_ORG: luanagithub

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: npm ci || npm install
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci || npm install
      - name: ESLint Backend
        working-directory: backend
        run: npx eslint .
      - name: ESLint Frontend
        working-directory: frontend
        run: npx eslint src --max-warnings=0 || npx eslint src

  typecheck:
    name: Type Check (Frontend)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci || npm install
      - name: TypeScript Check
        working-directory: frontend
        run: npx tsc --noEmit

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: [typecheck]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: npm ci || npm install
      - name: Run Backend Tests
        working-directory: backend
        run: |
          npx jest --config jest.config.unit.js --coverage --coverageDirectory coverage-unit --reporters=default \
            --coverageReporters=text --coverageReporters=lcov --coverageReporters=json-summary
          if [ -f jest.config.integration.js ]; then npx jest --config jest.config.integration.js; fi
      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage-unit/

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [typecheck]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci || npm install
      - name: Run Frontend Tests
        working-directory: frontend
        env:
          CI: true
        run: |
          npm test -- --coverage --watchAll=false \
            --coverageReporters=text --coverageReporters=lcov --coverageReporters=json-summary
      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

  coverage-gate:
    name: Coverage Gate (>=80%)
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
      - name: Combine & Enforce Coverage
        run: |
          set -e
          BACK=$(find coverage-artifacts/backend-coverage -maxdepth 2 -name 'coverage-summary.json' | head -n1 || true)
          FRONT=$(find coverage-artifacts/frontend-coverage -maxdepth 2 -name 'coverage-summary.json' | head -n1 || true)
          if [ -z "$BACK" ] || [ -z "$FRONT" ]; then echo "::error::Missing coverage summaries"; exit 1; fi
          export BACK
          export FRONT
          node <<'EOF'
          const fs = require('fs');
          const glob = (p)=>p;
          const backend = process.env.BACK;
          const frontend = process.env.FRONT;
          const b = JSON.parse(fs.readFileSync(backend,'utf8'));
          const f = JSON.parse(fs.readFileSync(frontend,'utf8'));
          function merge(a,b){return { total:a.total+b.total, covered:a.covered+b.covered };}
          const metrics = Object.keys(b.total);
          const result={ total:{} };
          for(const m of metrics){ const merged=merge(b.total[m], f.total[m]); merged.pct=(merged.covered/merged.total*100).toFixed(2); result.total[m]=merged; }
          const thresholds={ lines:80, statements:80, functions:80, branches:80 };
          let fails=[]; for(const k of Object.keys(thresholds)){ if(parseFloat(result.total[k].pct) < thresholds[k]) fails.push(k+':'+result.total[k].pct); }
          if(fails.length){ console.error('Coverage gate fail:', fails.join(',')); process.exit(1); }
          console.log('Coverage OK');
          fs.mkdirSync('combined-coverage',{recursive:true});
          const avg=(Object.values(result.total).reduce((a,m)=>a+parseFloat(m.pct),0)/metrics.length).toFixed(2);
          fs.writeFileSync('combined-coverage/coverage-badge.json', JSON.stringify({schemaVersion:1,label:'coverage (combined)',message:avg+'%',color: parseFloat(avg)>=80?'green':'red'}));
          EOF
      - name: Upload Combined Coverage Badge
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: combined-coverage/coverage-badge.json

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [coverage-gate]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: npm ci || npm install
      - name: Backend smoke
        working-directory: backend
        run: |
          node -c src/server.js 2>/dev/null || echo "(no syntax issues)"
          timeout 5s node src/server.js &
          sleep 2
          echo "Backend started (smoke)"

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci || npm install
      - name: Build
        working-directory: frontend
        run: |
          if npm run | grep -q build; then npm run build; else echo "(no build script)"; fi

  codeql:
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    needs: [build-frontend]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          build-mode: none
      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'

  sonar:
    name: SonarCloud (push only)
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.sources=backend/src,frontend/src
            -Dsonar.exclusions=**/node_modules/**,**/coverage/**

  finalize:
    name: Finalize Summary
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test-backend, test-frontend, coverage-gate, build-backend, build-frontend, codeql, sonar]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "### Pipeline Orchestrator" >> $GITHUB_STEP_SUMMARY
          echo "Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Typecheck: ${{ needs.typecheck.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Backend Tests: ${{ needs['test-backend'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "Frontend Tests: ${{ needs['test-frontend'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "Coverage Gate: ${{ needs['coverage-gate'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "Build Backend: ${{ needs['build-backend'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "Build Frontend: ${{ needs['build-frontend'].result }}" >> $GITHUB_STEP_SUMMARY
          echo "CodeQL: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "push" ]; then echo "Sonar: ${{ needs.sonar.result }}" >> $GITHUB_STEP_SUMMARY; fi
