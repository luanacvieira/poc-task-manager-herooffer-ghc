name: CI Unified

on:
  pull_request:
    branches: [ develop, master ]
  push:
    branches: [ develop, master ]
  schedule:
    - cron: '0 4 * * 1'

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: '20.x'
  CACHE_KEY_SUFFIX: v1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install (frontend)
        working-directory: frontend
        run: npm ci
      - name: Install (backend)
        working-directory: backend
        run: npm ci || npm install
      - name: ESLint Backend
        working-directory: backend
        run: npx eslint .
      - name: ESLint Frontend
        working-directory: frontend
        run: npx eslint src --max-warnings=0 || npx eslint src

  typecheck:
    name: Type Check (Frontend)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Frontend
        working-directory: frontend
        run: npm ci
      - name: TypeScript Check
        working-directory: frontend
        run: npx tsc --noEmit

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Backend
        working-directory: backend
        run: npm ci || npm install
      - name: Run Backend Tests (Unit + Integration)
        working-directory: backend
        run: |
          npx jest --config jest.config.unit.js --coverage --coverageDirectory coverage-unit --reporters=default --reporters=json-summary
          if [ -f jest.config.integration.js ]; then npx jest --config jest.config.integration.js; fi
      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
            name: backend-coverage
            path: backend/coverage-unit/coverage-summary.json

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Frontend
        working-directory: frontend
        run: npm ci
      - name: Run Frontend Tests
        working-directory: frontend
        env:
          CI: true
        run: npx jest --coverage --coverageDirectory coverage --reporters=default --reporters=json-summary
      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
            name: frontend-coverage
            path: frontend/coverage/coverage-summary.json

  coverage-gate:
    name: Coverage Gate (>=80%)
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
      - name: Combine Coverage
        run: |
          BACKEND_FILE=$(find coverage-artifacts/backend-coverage -name 'coverage-summary.json' | head -n1)
          FRONTEND_FILE=$(find coverage-artifacts/frontend-coverage -name 'coverage-summary.json' | head -n1)
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          function read(p){return JSON.parse(fs.readFileSync(p,'utf8'));}
          const b = read(process.env.BACKEND_FILE);
          const f = read(process.env.FRONTEND_FILE);
          function agg(a,b){return {total: a.total + b.total, covered: a.covered + b.covered, skipped: (a.skipped||0)+(b.skipped||0), pct:0};}
          const keys = Object.keys(b.total);
          const result = { total: {} };
          for(const k of keys){
            const merged = agg(b.total[k], f.total[k]);
            merged.pct = (merged.covered/merged.total*100).toFixed(2);
            result.total[k]=merged;
          }
          const summaryLine = Object.values(result.total).reduce((acc, m)=>acc+m.covered,0)+"/"+Object.values(result.total).reduce((acc,m)=>acc+m.total,0);
          fs.mkdirSync('combined-coverage',{recursive:true});
            fs.writeFileSync('combined-coverage/combined-coverage-summary.json', JSON.stringify(result,null,2));
          console.log('Combined coverage saved. Ratios:', summaryLine);
          const thresholds = { lines:80, statements:80, functions:80, branches:80 };
          for(const metric of Object.keys(thresholds)){
            const pct = parseFloat(result.total[metric].pct);
            if(pct < thresholds[metric]){
              console.error(`Coverage gate failed: ${metric} ${pct}% < ${thresholds[metric]}%`);
              process.exit(1);
            }
          }
          console.log('Coverage gate passed.');
          EOF
      - name: Upload Combined Coverage
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: combined-coverage/combined-coverage-summary.json

  codeql:
    name: CodeQL (security-extended)
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        language: [ 'actions', 'javascript-typescript' ]
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          build-mode: none
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  summary:
    name: Summary & Meta
    runs-on: ubuntu-latest
    needs: [coverage-gate, codeql, typecheck]
    if: always()
    steps:
      - name: Result Matrix
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "TypeCheck: ${{ needs.typecheck.result }}"
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Coverage Gate: ${{ needs.coverage-gate.result }}"
          echo "CodeQL: ${{ needs.codeql.result }}"
          if [ "${{ needs.coverage-gate.result }}" != "success" ]; then echo 'Coverage gate failed'; exit 1; fi
          if [ "${{ needs.codeql.result }}" != "success" ]; then echo 'CodeQL failed'; exit 1; fi

# Branch Protection: exigir checks: Lint, Type Check (Frontend), Test Backend, Test Frontend, Coverage Gate (>=80%), CodeQL (security-extended)
# Futuro: adicionar cache mais granular (actions/cache) com key baseado em hashFiles('**/package-lock.json')
# Futuro: publicar badge de cobertura (ex: shields via gist) ap√≥s merge em branch principal.