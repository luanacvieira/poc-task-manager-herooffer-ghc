name: Build

on:
  workflow_run:
    workflows: ["Test and Coverage Check"]
    types: [completed]
  # Execução manual direta do Build (debug / inspeção independente)
  workflow_dispatch:

permissions:
  contents: write

env:
  NODE_VERSION: 20.x

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: npm ci || npm install
      - name: Backend smoke (syntax & start test)
        working-directory: backend
        run: |
          node -c src/server.js 2>/dev/null || echo "(no syntax issues)"
          timeout 5s node src/server.js &
          sleep 2
          echo "Backend started (smoke)."
      - name: Archive backend (if packaging desired)
        if: always()
        run: |
          tar -czf backend-dist.tar.gz backend/src package.json backend/package.json || true
      - name: Upload backend artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact-${{ github.event.workflow_run.head_sha }}
          path: backend-dist.tar.gz

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci || npm install
      - name: Build frontend
        working-directory: frontend
        run: |
          if npm run | grep -q build; then npm run build; else echo "(no build script)"; fi
      - name: Upload frontend build artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.event.workflow_run.head_sha }}
          path: frontend/build
      - name: Build summary
        if: always()
        run: |
          if [ -d frontend/build ]; then echo "\n### Frontend Build Output Size" >> $GITHUB_STEP_SUMMARY; du -sh frontend/build | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; fi

  publish-build-badge:
    name: Publish Build Badge
    needs: [build-backend, build-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare badges branch workspace
        shell: bash
        run: |
          set -e
          TARGET_BRANCH=badges
          if git ls-remote --exit-code origin $TARGET_BRANCH >/dev/null 2>&1; then
            git checkout $TARGET_BRANCH
          else
            git checkout --orphan $TARGET_BRANCH
            find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + || true
          fi
          mkdir -p badges
      - name: Generate build status badge
        shell: bash
        run: |
          BACKEND_RESULT='${{ needs.build-backend.result }}'
            FRONTEND_RESULT='${{ needs.build-frontend.result }}'
          STATUS=fail
          COLOR=red
          if [ "$BACKEND_RESULT" = "success" ] && [ "$FRONTEND_RESULT" = "success" ]; then
            STATUS=pass
            COLOR=brightgreen
          fi
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/:' '--')
          cat > badges/build-status-badge.json <<EOF
          { "schemaVersion": 1, "label": "build", "message": "$STATUS", "color": "$COLOR" }
          EOF
          cp badges/build-status-badge.json "badges/build-status-badge-${SAFE_BRANCH}.json"
          echo "Generated badges for branch name ${GITHUB_REF_NAME} (safe: ${SAFE_BRANCH})"
      - name: Commit & push badge
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add badges/build-status-badge*.json
          git commit -m "chore(ci): update build status badge for ${GITHUB_REF_NAME} (${GITHUB_SHA:0:7})" || echo "No changes to commit"
          git push origin HEAD:badges || echo "WARNING: push to badges failed"

# Este workflow agora publica também badge de status de build.
