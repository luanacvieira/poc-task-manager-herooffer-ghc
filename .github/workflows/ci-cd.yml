name: Build

on:
  workflow_run:
    workflows: ["Test and Coverage Check"]
    types: [completed]
  # Execução manual direta do Build (debug / inspeção independente)
  workflow_dispatch:

permissions:
  contents: write

env:
  NODE_VERSION: 20.x
  BADGE_BRANCH: badges

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: npm ci || npm install
      - name: Backend smoke (syntax & start test)
        working-directory: backend
        run: |
          node -c src/server.js 2>/dev/null || echo "(no syntax issues)"
          timeout 5s node src/server.js &
          sleep 2
          echo "Backend started (smoke)."
      - name: Archive backend (if packaging desired)
        if: always()
        run: |
          tar -czf backend-dist.tar.gz backend/src package.json backend/package.json || true
      - name: Upload backend artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact-${{ github.event.workflow_run.head_sha }}
          path: backend-dist.tar.gz
      - name: Record backend build status
        if: always()
        id: backend_status
        run: |
          echo "status=${{ job.status }}" >> $GITHUB_OUTPUT

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci || npm install
      - name: Build frontend
        working-directory: frontend
        run: |
          if npm run | grep -q build; then npm run build; else echo "(no build script)"; fi
      - name: Upload frontend build artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.event.workflow_run.head_sha }}
          path: frontend/build
      - name: Build summary
        if: always()
        run: |
          if [ -d frontend/build ]; then echo "\n### Frontend Build Output Size" >> $GITHUB_STEP_SUMMARY; du -sh frontend/build | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; fi
      - name: Record frontend build status
        if: always()
        id: frontend_status
        run: |
          echo "status=${{ job.status }}" >> $GITHUB_OUTPUT

  publish-build-badge:
    name: Publish Build Badge
    runs-on: ubuntu-latest
    needs: [build-frontend]
    if: always()
    steps:
      - name: Determine overall build status
        id: overall
        env:
          BACKEND_RESULT: ${{ needs.build-backend.result }}
          FRONTEND_RESULT: ${{ needs.build-frontend.result }}
        run: |
          # Map statuses: success, failure (treat cancelled as failure for badge)
          echo "backend_status=$BACKEND_RESULT" >> $GITHUB_OUTPUT
          echo "frontend_status=$FRONTEND_RESULT" >> $GITHUB_OUTPUT
          if [ "$BACKEND_RESULT" = "success" ] && [ "$FRONTEND_RESULT" = "success" ]; then
            echo 'overall=success' >> $GITHUB_OUTPUT
          else
            echo 'overall=failure' >> $GITHUB_OUTPUT
          fi
      - name: Checkout badges branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Update / create badge JSON
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
        run: |
          set -euo pipefail
          SAFE_BRANCH=$(echo "$HEAD_BRANCH" | tr '/:' '--')
          git fetch origin $BADGE_BRANCH || true
          if git show-ref --verify --quiet refs/remotes/origin/$BADGE_BRANCH; then
            git checkout $BADGE_BRANCH
            git reset --hard origin/$BADGE_BRANCH
          else
            git checkout --orphan $BADGE_BRANCH
            git rm -rf . 2>/dev/null || true
            rm -rf * .[^.]* 2>/dev/null || true
          fi
          mkdir -p badges
          OVERALL='${{ steps.overall.outputs.overall }}'
          if [ "$OVERALL" = "success" ]; then COLOR=brightgreen; MSG=success; else COLOR=red; MSG=failure; fi
          printf '{"schemaVersion":1,"label":"build (%s)","message":"%s","color":"%s"}\n' "$HEAD_BRANCH" "$MSG" "$COLOR" > badges/build-status-badge-${SAFE_BRANCH}.json
          # Generic latest (optionally override if HEAD is default branch)
          if [ "${HEAD_BRANCH}" = "master" ]; then cp badges/build-status-badge-${SAFE_BRANCH}.json badges/build-status-badge.json; fi
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add badges/build-status-badge-${SAFE_BRANCH}.json badges/build-status-badge.json 2>/dev/null || true
          if git diff --cached --quiet; then echo "No build badge changes"; else git commit -m "chore(badges): update build badge (${HEAD_BRANCH})"; git push origin HEAD:$BADGE_BRANCH || echo "Push failed"; fi

  update-readme-build-badge:
    name: Refresh README build badge (optional)
    runs-on: ubuntu-latest
    needs: [publish-build-badge]
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0
      - name: Patch README build badge line
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          SAFE_BRANCH=$(echo "$HEAD_BRANCH" | tr '/:' '--')
            BADGES_URL="https://raw.githubusercontent.com/${REPO}/badges/badges"
          BUILD_MD="![Build (${HEAD_BRANCH})](https://img.shields.io/endpoint?url=${BADGES_URL}/build-status-badge-${SAFE_BRANCH}.json)"
          if grep -q 'BADGES-AUTO-START' README.md; then
            # Replace existing build badge line inside block
            tmp=$(mktemp)
            awk -v b="$BUILD_MD" 'BEGIN{inblk=0} /BADGES-AUTO-START/{inblk=1;print;next} /BADGES-AUTO-END/{inblk=0;print;next} { if(inblk && $0 ~ /!\[Build \(/){print b} else {print} }' README.md > $tmp && mv $tmp README.md
            git config user.name "github-actions"
            git config user.email "actions@github.com"
            git add README.md || true
            if git diff --cached --quiet; then echo "No README change"; else git commit -m "docs(badges): refresh build badge (${HEAD_BRANCH})" || true; fi
          else
            echo "README block not present (skipping)"; fi
      - name: Push README change
        run: |
          git push origin HEAD:${GITHUB_REF_NAME:-${{ github.event.workflow_run.head_branch }}} || echo "Skip push"

  publish-build-badge:
    name: Publish Build Badge
    needs: [build-backend, build-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare badges branch workspace
        shell: bash
        run: |
          set -e
          TARGET_BRANCH=badges
          if git ls-remote --exit-code origin $TARGET_BRANCH >/dev/null 2>&1; then
            git checkout $TARGET_BRANCH
          else
            git checkout --orphan $TARGET_BRANCH
            find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + || true
          fi
          mkdir -p badges
      - name: Generate build status badge
        shell: bash
        run: |
          BACKEND_RESULT='${{ needs.build-backend.result }}'
            FRONTEND_RESULT='${{ needs.build-frontend.result }}'
          STATUS=fail
          COLOR=red
          if [ "$BACKEND_RESULT" = "success" ] && [ "$FRONTEND_RESULT" = "success" ]; then
            STATUS=pass
            COLOR=brightgreen
          fi
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/:' '--')
          cat > badges/build-status-badge.json <<EOF
          { "schemaVersion": 1, "label": "build", "message": "$STATUS", "color": "$COLOR" }
          EOF
          cp badges/build-status-badge.json "badges/build-status-badge-${SAFE_BRANCH}.json"
          echo "Generated badges for branch name ${GITHUB_REF_NAME} (safe: ${SAFE_BRANCH})"
      - name: Commit & push badge
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add badges/build-status-badge*.json
          git commit -m "chore(ci): update build status badge for ${GITHUB_REF_NAME} (${GITHUB_SHA:0:7})" || echo "No changes to commit"
          git push origin HEAD:badges || echo "WARNING: push to badges failed"

# Este workflow agora publica também badge de status de build.
