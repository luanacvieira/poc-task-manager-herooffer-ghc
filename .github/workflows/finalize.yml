name: Finalize Workflow

on:
  workflow_call:
    inputs:
      coverage_avg:
        description: 'Average coverage percentage'
        required: true
        type: string
      diff_pct:
        description: 'Diff coverage percentage'
        required: true
        type: string
      version:
        description: 'Application version'
        required: true
        type: string

jobs:
  finalize:
    name: Finalize Pipeline
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: finalize-artifacts
        continue-on-error: true
      - name: Debug Coverage Data
        run: |
          echo "=== COVERAGE ARTIFACTS DEBUG ==="
          find finalize-artifacts -type f -name "*.json" | head -10 | while read file; do
            echo "File: $file"
            cat "$file" | jq . || cat "$file"
            echo "---"
          done
        continue-on-error: true
      - name: Pipeline Summary
        env:
          COVERAGE_AVG: ${{ inputs.coverage_avg }}
          DIFF_PCT: ${{ inputs.diff_pct }}
          VERSION: ${{ inputs.version }}
        run: |
          echo "=== PIPELINE SUMMARY ==="
          echo "‚úÖ Code Quality: Passed"
          echo "‚úÖ Tests: Passed"
          echo "üìä Coverage: $COVERAGE_AVG%"
          echo "üìà Diff Coverage: $DIFF_PCT%"
          echo "üèóÔ∏è Build: Completed"
          echo "üîí Security: Scanned"
          echo "üì¶ Package: $VERSION"
          echo "üöÄ Deploy: Completed"
          echo "========================"
          
          # Generate GitHub Actions Summary
          {
            echo "## üöÄ Pipeline Execution Summary"
            echo ""
            echo "| Stage | Status | Details |"
            echo "|-------|---------|---------|"
            echo "| üîç Code Quality | ‚úÖ Passed | Lint and format checks completed |"
            echo "| üß™ Tests | ‚úÖ Passed | All unit and integration tests passed |"
            echo "| üìä Coverage | $([ -n "$COVERAGE_AVG" ] && echo "‚úÖ $COVERAGE_AVG%" || echo "‚ö†Ô∏è N/A") | Combined backend + frontend coverage |"
            echo "| üìà Diff Coverage | $([ -n "$DIFF_PCT" ] && echo "‚úÖ $DIFF_PCT%" || echo "‚ö†Ô∏è N/A") | New code coverage |"
            echo "| üèóÔ∏è Build | ‚úÖ Completed | Application built successfully |"
            echo "| üîí Security | ‚úÖ Scanned | Security analysis completed |"
            echo "| üì¶ Package | ‚úÖ Published | Version: $VERSION |"
            echo "| üöÄ Deploy | ‚úÖ Completed | Application deployed |"
            echo ""
            echo "### üìã Test Results"
            echo "- **Backend Tests**: All unit tests passed"
            echo "- **Frontend Tests**: All component tests passed"
            echo "- **Integration Tests**: All API tests passed"
            echo ""
            echo "### üìä Coverage Details"
            echo "- **Combined Coverage**: ${COVERAGE_AVG:-N/A}%"
            echo "- **Diff Coverage**: ${DIFF_PCT:-N/A}%"
            echo ""
          } >> $GITHUB_STEP_SUMMARY

  update-badges:
    name: Update Coverage Badges
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup worktree for badges branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if git show-ref --verify --quiet refs/remotes/origin/badges; then
            git worktree add _badges_worktree origin/badges
          else
            git worktree add -b badges _badges_worktree
            cd _badges_worktree
            mkdir -p badges/history
            echo '{"schemaVersion":1,"label":"badges","message":"initialized","color":"blue"}' > badges/init.json
            git add .
            git commit --allow-empty -m "chore(badges): initialize badges branch"
            git push -u origin badges || true
          fi
      - name: Generate Coverage Badges
        env:
          COVERAGE_AVG: ${{ inputs.coverage_avg }}
          DIFF_PCT: ${{ inputs.diff_pct }}
          VERSION: ${{ inputs.version }}
          BRANCH_SAFE: ${{ github.ref_name }}
        run: |
          cd _badges_worktree
          mkdir -p badges/history
          
          # Global badges
          COVERAGE_COLOR="red"
          COVERAGE_NUM=$(echo "${COVERAGE_AVG:-0}" | cut -d'.' -f1)
          if [ "$COVERAGE_NUM" -ge 90 ]; then COVERAGE_COLOR="brightgreen"
          elif [ "$COVERAGE_NUM" -ge 80 ]; then COVERAGE_COLOR="green"  
          elif [ "$COVERAGE_NUM" -ge 60 ]; then COVERAGE_COLOR="orange"
          fi
          
          echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${COVERAGE_AVG:-0}%\",\"color\":\"$COVERAGE_COLOR\"}" > badges/coverage-badge.json
          echo "{\"schemaVersion\":1,\"label\":\"diff coverage\",\"message\":\"${DIFF_PCT:-0}%\",\"color\":\"brightgreen\"}" > badges/diff-coverage-badge.json
          echo "{\"schemaVersion\":1,\"label\":\"build\",\"message\":\"passing\",\"color\":\"brightgreen\"}" > badges/build-status-badge.json
          
          # Branch-specific badges
          BRANCH_SAFE_NAME=$(echo "$BRANCH_SAFE" | tr '/' '_')
          echo "{\"schemaVersion\":1,\"label\":\"coverage ($BRANCH_SAFE)\",\"message\":\"${COVERAGE_AVG:-0}%\",\"color\":\"$COVERAGE_COLOR\"}" > "badges/coverage-badge-${BRANCH_SAFE_NAME}.json"
          echo "{\"schemaVersion\":1,\"label\":\"build ($BRANCH_SAFE)\",\"message\":\"passing\",\"color\":\"brightgreen\"}" > "badges/build-status-badge-${BRANCH_SAFE_NAME}.json"
          
          # History tracking
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "{\"date\":\"$DATE\",\"coverage\":${COVERAGE_AVG:-0},\"diffCoverage\":${DIFF_PCT:-0},\"branch\":\"$BRANCH_SAFE\",\"version\":\"$VERSION\"}" > "badges/history/coverage-latest-${BRANCH_SAFE_NAME}.json"
          
      - name: Commit badges
        run: |
          cd _badges_worktree
          git add .
          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m "chore(badges): update coverage badges for ${{ github.ref_name }}"
            git push origin badges
            echo "‚úÖ Badges atualizados na branch badges"
          else
            echo "‚ö†Ô∏è Nenhuma altera√ß√£o nos badges"
          fi