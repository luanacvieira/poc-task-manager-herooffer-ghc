name: Test and Coverage Check

on:
  workflow_run:
    workflows: ["Static Checks"]
    types: [completed]

permissions:
  contents: read

env:
  NODE_VERSION: 20.x

jobs:
  test-backend:
    name: Test Backend
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: npm ci || npm install
      - name: Run Backend Tests (Unit + Integration)
        working-directory: backend
        run: |
          npx jest --config jest.config.unit.js --coverage --coverageDirectory coverage-unit --reporters=default --reporters=json-summary
          if [ -f jest.config.integration.js ]; then npx jest --config jest.config.integration.js; fi
      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage-unit/coverage-summary.json

  test-frontend:
    name: Test Frontend
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci || npm install
      - name: Run Frontend Tests
        working-directory: frontend
        env:
          CI: true
        run: npx jest --coverage --coverageDirectory coverage --reporters=default --reporters=json-summary
      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/coverage-summary.json

  coverage-gate:
    name: Coverage Gate (>=80%)
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: ${{ always() && github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
      - name: Combine Coverage
        run: |
          BACKEND_FILE=$(find coverage-artifacts/backend-coverage -name 'coverage-summary.json' | head -n1)
          FRONTEND_FILE=$(find coverage-artifacts/frontend-coverage -name 'coverage-summary.json' | head -n1)
          node <<'EOF'
          const fs = require('fs');
          function read(p){return JSON.parse(fs.readFileSync(p,'utf8'));}
          const b = read(process.env.BACKEND_FILE);
          const f = read(process.env.FRONTEND_FILE);
          function agg(a,b){return {total: a.total + b.total, covered: a.covered + b.covered, skipped: (a.skipped||0)+(b.skipped||0), pct:0};}
          const keys = Object.keys(b.total);
          const result = { total: {} };
          for(const k of keys){
            const merged = agg(b.total[k], f.total[k]);
            merged.pct = (merged.covered/merged.total*100).toFixed(2);
            result.total[k]=merged;
          }
          const thresholds = { lines:80, statements:80, functions:80, branches:80 };
          for(const metric of Object.keys(thresholds)){
            const pct = parseFloat(result.total[metric].pct);
            if(pct < thresholds[metric]){
              console.error(`Coverage gate failed: ${metric} ${pct}% < ${thresholds[metric]}%`);
              process.exit(1);
            }
          }
          fs.mkdirSync('combined-coverage',{recursive:true});
          fs.writeFileSync('combined-coverage/combined-coverage-summary.json', JSON.stringify(result,null,2));
          console.log('Coverage gate passed.');
          EOF
      - name: Upload Combined Coverage
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: combined-coverage/combined-coverage-summary.json

# Próximo workflow (CodeQL) dispara após sucesso deste via workflow_run.