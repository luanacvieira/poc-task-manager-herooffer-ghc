name: Semgrep SAST

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    - cron: '30 3 * * 1'  # Semanal (segunda 03:30 UTC)
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Python (for Semgrep CLI if needed)
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Cache Semgrep rules
        uses: actions/cache@v4
        with:
          path: ~/.semgrep
          key: semgrep-rules-${{ runner.os }}-v1
      - name: Install Semgrep CLI
        run: pip install --no-cache-dir semgrep==1.36.0

      - name: Run Semgrep (OWASP + JS rules) -> SARIF
        env:
          SEMGREP_TIMEOUT: '600'
        run: |
          set -e
          semgrep --config p/owasp-top-ten --config p/javascript --timeout $SEMGREP_TIMEOUT --sarif -o semgrep.sarif || true
          if [ ! -f semgrep.sarif ]; then echo "::error::Falha ao gerar semgrep.sarif"; exit 1; fi
          echo "Generated semgrep.sarif (size $(wc -c < semgrep.sarif) bytes)"

      - name: Validate SARIF presence
        run: |
          if [ ! -f semgrep.sarif ]; then
            echo "::error::semgrep.sarif nÃ£o encontrado. Falhando scan."
            exit 1
          fi
          echo "semgrep.sarif encontrado; tamanho:" $(wc -c < semgrep.sarif) "bytes"

      - name: Build Markdown Summary
        run: |
          ERRORS=$(jq '[.runs[].results[]? | select((.level|ascii_downcase)=="error")] | length' semgrep.sarif || echo 0)
          WARNINGS=$(jq '[.runs[].results[]? | select((.level|ascii_downcase)=="warning")] | length' semgrep.sarif || echo 0)
          INFOS=$(jq '[.runs[].results[]? | select((.level|ascii_downcase)=="note" or (.level|ascii_downcase)=="info")] | length' semgrep.sarif || echo 0)
          TOTAL=$(jq '[.runs[].results[]?] | length' semgrep.sarif || echo 0)
          echo "### Semgrep Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ERROR    | $ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "| WARNING  | $WARNINGS |" >> $GITHUB_STEP_SUMMARY
          echo "| INFO     | $INFOS |" >> $GITHUB_STEP_SUMMARY
          echo "| TOTAL    | $TOTAL |" >> $GITHUB_STEP_SUMMARY
          if [ "$TOTAL" -gt 0 ]; then
            echo "\nTop 5 (arquivo:regra)" >> $GITHUB_STEP_SUMMARY
            jq -r '.runs[].results[]? | "- " + (.locations[0].physicalLocation.artifactLocation.uri // "?") + ":" + (.ruleId // "")' semgrep.sarif | head -5 >> $GITHUB_STEP_SUMMARY
          fi
          echo "ERROR_COUNT=$ERRORS" >> $GITHUB_ENV

      - name: Upload SARIF to code scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Upload SARIF artifact (backup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif
          path: semgrep.sarif
          if-no-files-found: warn

      - name: Gate on ERROR findings (post-upload)
        run: |
          ERRORS=$(jq '[.runs[].results[]? | select(.level=="error" or .level=="ERROR")] | length' semgrep.sarif || echo 0)
          echo "Total ERROR findings: $ERRORS"
          if [ "$ERRORS" -gt 0 ]; then
            echo "::error::Semgrep encontrou $ERRORS findings de severidade ERROR. Bloqueando PR."
            exit 1
          fi
          echo "Nenhum finding ERROR. Gate liberado."
