name: SonarCloud Analysis

on:
  # Somente manual agora; Sonar roda no orquestrador.
  workflow_dispatch:
permissions:
  contents: read
  pull-requests: write

env:
  SONAR_PROJECT_KEY: github_poc-task-manager-herooffer-ghc
  SONAR_ORG: luanagithub
  NODE_VERSION: 20.x

jobs:
  sonar:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Baixa artifacts gerados pelo workflow anterior
      - name: Download backend coverage artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: backend-coverage
          path: backend/coverage-unit

      - name: Download frontend coverage artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: frontend-coverage
          path: frontend/coverage

      - name: Assert artifacts presence and handle missing cases
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "[INFO] Manual dispatch: expecting existing coverage artifacts committed previously."
          fi
          
          # Criar diretÃ³rios se nÃ£o existirem
          mkdir -p backend/coverage-unit frontend/coverage
          
          # Verificar se artifacts foram baixados com sucesso
          BACKEND_EXISTS=false
          FRONTEND_EXISTS=false
          
          if [ -f "backend/coverage-unit/lcov.info" ]; then
            BACKEND_EXISTS=true
            echo "âœ“ Backend coverage artifact found"
          else
            echo "âš  Backend coverage artifact missing - will skip backend coverage"
          fi
          
          if [ -f "frontend/coverage/lcov.info" ]; then
            FRONTEND_EXISTS=true
            echo "âœ“ Frontend coverage artifact found"
          else
            echo "âš  Frontend coverage artifact missing - will skip frontend coverage"
          fi
          
          if [ "$BACKEND_EXISTS" = "false" ] && [ "$FRONTEND_EXISTS" = "false" ]; then
            echo "âš  No coverage artifacts found - SonarCloud will run without coverage data"
            echo "This usually happens when the previous workflow failed or artifacts expired."
            echo "COVERAGE_AVAILABLE=false" >> $GITHUB_ENV
          else
            echo "COVERAGE_AVAILABLE=true" >> $GITHUB_ENV
          fi
      - name: Merge lcov reports into combined-lcov.info
        run: |
          mkdir -p combined-coverage
          BACKEND=backend/coverage-unit/lcov.info
          FRONTEND=frontend/coverage/lcov.info
          
          echo "ðŸ“Š Merging available coverage reports..."
          ls -la backend/coverage-unit/ || echo "No backend coverage dir"
          ls -la frontend/coverage/ || echo "No frontend coverage dir"
          
          if [ -f "$BACKEND" ] && [ -f "$FRONTEND" ]; then
            # Concat simples Ã© suficiente porque os paths sÃ£o distintos; Sonar deduplica
            { echo "TN:"; cat "$BACKEND"; echo "TN:"; cat "$FRONTEND"; } > combined-coverage/combined-lcov.info
            echo "âœ“ Merged both backend and frontend lcov -> combined-coverage/combined-lcov.info"
          elif [ -f "$BACKEND" ]; then
            cp "$BACKEND" combined-coverage/combined-lcov.info
            echo "âœ“ Using only backend lcov"
          elif [ -f "$FRONTEND" ]; then
            cp "$FRONTEND" combined-coverage/combined-lcov.info
            echo "âœ“ Using only frontend lcov"
          else
            echo "âš  No lcov files found, creating empty coverage file"
            touch combined-coverage/combined-lcov.info
          fi
          
          if [ -f combined-coverage/combined-lcov.info ]; then
            echo "ðŸ“„ Combined coverage file size: $(wc -l < combined-coverage/combined-lcov.info) lines"
          fi

      - name: Create sonar-project.properties (with conditional coverage)
        run: |
          cat > sonar-project.properties << EOF
          sonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          sonar.organization=${{ env.SONAR_ORG }}
          sonar.sources=backend/src,frontend/src
          sonar.exclusions=**/node_modules/**,**/coverage/**,**/coverage-unit/**,frontend/build/**
          sonar.coverage.exclusions=**/*.test.js,**/*.test.tsx,**/__tests__/**,**/tests/**
          sonar.sourceEncoding=UTF-8
          EOF
          
          # Adicionar coverage apenas se disponÃ­vel e nÃ£o vazio
          if [ -f "combined-coverage/combined-lcov.info" ] && [ -s "combined-coverage/combined-lcov.info" ]; then
            echo "sonar.javascript.lcov.reportPaths=combined-coverage/combined-lcov.info" >> sonar-project.properties
            echo "âœ“ Including coverage report in SonarCloud analysis"
          else
            echo "âš  Running SonarCloud without coverage data (no artifacts or empty coverage)"
          fi
          
          echo "ðŸ“‹ Final SonarCloud configuration:"
          cat sonar-project.properties

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Quality Gate Status (API)
        if: always()
        run: |
          echo "Para status da Quality Gate em PR, o SonarCloud adiciona check automaticamente."
